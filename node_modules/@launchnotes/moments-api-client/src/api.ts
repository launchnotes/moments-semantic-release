/* tslint:disable */
/* eslint-disable */
/**
 * Moments
 * string
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@launchnotes.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface PostMoments200Response
 */
export interface PostMoments200Response {
    /**
     * 
     * @type {string}
     * @memberof PostMoments200Response
     */
    ''?: string;
    /**
     * 
     * @type {string}
     * @memberof PostMoments200Response
     */
    'momentId': string;
}
/**
 * 
 * @export
 * @interface PostMoments422Response
 */
export interface PostMoments422Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof PostMoments422Response
     */
    'errors'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PostMoments422Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface PostMomentsRequest
 */
export interface PostMomentsRequest {
    /**
     * Object that is supposed to look like the schema specified.
     * @type {object}
     * @memberof PostMomentsRequest
     */
    'data': object;
    /**
     * 
     * @type {string}
     * @memberof PostMomentsRequest
     */
    'projectId': string;
    /**
     * Path to a schema to specify what the payload is supposed to look like.
     * @type {string}
     * @memberof PostMomentsRequest
     */
    'schemaId': string;
}

/**
 * MomentsApi - axios parameter creator
 * @export
 */
export const MomentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new Moment.
         * @summary Create Moment
         * @param {PostMomentsRequest} [postMomentsRequest] Shape of request body when creating Moments.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMoments: async (postMomentsRequest?: PostMomentsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/moments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postMomentsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MomentsApi - functional programming interface
 * @export
 */
export const MomentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MomentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new Moment.
         * @summary Create Moment
         * @param {PostMomentsRequest} [postMomentsRequest] Shape of request body when creating Moments.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMoments(postMomentsRequest?: PostMomentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostMoments200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postMoments(postMomentsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MomentsApi - factory interface
 * @export
 */
export const MomentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MomentsApiFp(configuration)
    return {
        /**
         * Create a new Moment.
         * @summary Create Moment
         * @param {PostMomentsRequest} [postMomentsRequest] Shape of request body when creating Moments.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMoments(postMomentsRequest?: PostMomentsRequest, options?: any): AxiosPromise<PostMoments200Response> {
            return localVarFp.postMoments(postMomentsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MomentsApi - object-oriented interface
 * @export
 * @class MomentsApi
 * @extends {BaseAPI}
 */
export class MomentsApi extends BaseAPI {
    /**
     * Create a new Moment.
     * @summary Create Moment
     * @param {PostMomentsRequest} [postMomentsRequest] Shape of request body when creating Moments.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MomentsApi
     */
    public postMoments(postMomentsRequest?: PostMomentsRequest, options?: AxiosRequestConfig) {
        return MomentsApiFp(this.configuration).postMoments(postMomentsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


